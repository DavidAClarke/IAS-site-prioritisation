# the binary rasters together -> 2 indicates intersection
combination <- x.bin + y.bin
intersection <- combination == 2
# Union is all the area covered by the both rasters
union <- combination >= 1
return(cellStats(intersection, "sum") / cellStats(union, "sum"))
}
top_two <- calculate_jaccards(full_rank_stack, x.min = 0.98, x.max = 1.0,
y.min = 0.98,y.max = 1.0,all_names)
top_two <- calculate_jaccards(stack(full_rank_stack), x.min = 0.98, x.max = 1.0,
y.min = 0.98,y.max = 1.0,all_names)
## Calculate Jaccard similarities----
calculate_jaccards <- function(rank_stack, x.min, x.max, y.min, y.max,
variant_names) {
jaccards <- matrix(nrow = nlayers(rank_stack), ncol = nlayers(rank_stack))
for (i in 1:nrow(jaccards)) {
for (j in 1:ncol(jaccards)) {
if (i == j) {
jaccards[i, j] <- 1
}
else {
if (is.na(jaccards[j, i])) {
message(paste0("Calculating Jaccard index between ",
names(rank_stack[[i]]),
" and ", names(rank_stack[[j]])))
jaccards[i, j] <- jaccard(rank_stack[[i]], rank_stack[[j]],
x.min = x.min, x.max = x.max,
y.min = y.min, y.max = y.max)
}
else {
jaccards[i, j] <- NA
}
}
}
}
jaccards <- as.data.frame(jaccards)
colnames(jaccards) <- variant_names
rownames(jaccards) <- variant_names
return(jaccards)
}
top_two <- calculate_jaccards(stack(full_rank_stack), x.min = 0.98, x.max = 1.0,
y.min = 0.98,y.max = 1.0,all_names)
View(top_two)
top_five <- calculate_jaccards(stack(full_rank_stack), x.min = 0.95, x.max = 1.0,
y.min = 0.95,y.max = 1.0,all_names)
#Top 10%
top_ten <- calculate_jaccards(stack(full_rank_stack), x.min = 0.9, x.max = 1.0,
y.min = 0.9,y.max = 1.0,all_names)
#Top 25%
top_twentyfive <- calculate_jaccards(stack(full_rank_stack), x.min = 0.75, x.max = 1.0,
y.min = 0.75,y.max = 1.0,all_names)
#Top 50%
top_fifty <- calculate_jaccards(stack(full_rank_stack), x.min = 0.5, x.max = 1.0,
y.min = 0.5,y.max = 1.0,all_names)
#Top 80%
top_eighty <- calculate_jaccards(stack(full_rank_stack), x.min = 0.2, x.max = 1.0,
y.min = 0.2,y.max = 1.0,all_names)
#Total
total <- calculate_jaccards(stack(full_rank_stack), x.min = 0.0, x.max = 1.0,
y.min = 0.0,y.max = 1.0,all_names)
write.csv(top_two, file = here(dirname(here()), "zonation", "jaccard_two.csv"), na = "-", row.names = T)
write.csv(top_five, file = here(dirname(here()), "zonation", "jaccard_five.csv"), na = "-", row.names = T)
write.csv(top_ten, file = here(dirname(here()), "zonation", "jaccard_ten.csv"), na = "-", row.names = T)
write.csv(top_twentyfive, here(dirname(here()), "zonation", "jaccard_twentyfive.csv"), na = "-", row.names = T)
write.csv(top_fifty, file = here(dirname(here()), "zonation", "jaccard_fifty.csv"), na = "-", row.names = T)
write.csv(top_eighty, file = here(dirname(here()), "zonation", "jaccard_eighty.csv"), na = "-", row.names = T)
write.csv(total, file = here(dirname(here()), "zonation", "jaccard_total.csv"), na = "-", row.names = T)
rank_diff(full_rank_stack[[1]],full_rank_stack[[2]])
## Priority rank difference map----
rank_diff <- function(rankmap1, rankmap2){
species_only_diff <- rankmap1 - rankmap2
coolwarm_hcl <- colorspace::diverging_hcl(11,h = c(250, 10), c = 100,
l = c(37, 88), power = c(0.7, 1.7))
species_only_diff_sf <- species_only_diff %>%
stars::st_as_stars() %>%
st_as_sf()
ggplot()+
geom_sf(data = species_only_diff_sf, aes(fill=rankmap),
color=NA,
show.legend = T) +
scale_fill_gradientn(colours = rev(coolwarm_hcl),
name = "Sensitivity\ndifference",
breaks = c(-0.5, 0.0, 0.5)) +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
}
rank_diff(full_rank_stack[[1]],full_rank_stack[[2]])
full_rank_stack[[1]]
full_rank_stack[[2]]
species_only_diff <- full_rank_stack[[1]] - full_rank_stack[[2]]
species_only_diff
species_only_diff_sf <- species_only_diff %>%
stars::st_as_stars() %>%
st_as_sf()
species_only_diff_sf
## Priority rank difference map----
rank_diff <- function(rankmap1, rankmap2){
species_only_diff <- rankmap1 - rankmap2
names(species_only_diff) <- "rankmap"
coolwarm_hcl <- colorspace::diverging_hcl(11,h = c(250, 10), c = 100,
l = c(37, 88), power = c(0.7, 1.7))
species_only_diff_sf <- species_only_diff %>%
stars::st_as_stars() %>%
st_as_sf()
ggplot()+
geom_sf(data = species_only_diff_sf, aes(fill=rankmap),
color=NA,
show.legend = T) +
scale_fill_gradientn(colours = rev(coolwarm_hcl),
name = "Sensitivity\ndifference",
breaks = c(-0.5, 0.0, 0.5)) +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
}
rank_diff(full_rank_stack[[1]],full_rank_stack[[2]])
here(dirname(),here())
regional_model_path <- here(dirname(here()))
here(dirname(here()))
dirname(here())
################################################################################
#Susceptible sites
#external hard drive
#regional_model_path <- "G:/Chapter_3/SpatialData/IAS_distributions/IAS_regional"
regional_model_path <- here(dirname(here()), "IAS_regional")
##CAZ with weights##
#Pheidole megacephala
PM_bin <- rast(here(regional_model_path,
"Pheidole.megacephala",
"proj_regional",
"individual_projections",
paste0("Pheidole.megacephala",
"_EMcaByTSS_mergedAlgo_mergedRun_mergedData_TSSbin.gri")))
##CAZ with weights##
#Pheidole megacephala
PM_bin <- raster(here(regional_model_path,
"Pheidole.megacephala",
"proj_regional",
"individual_projections",
paste0("Pheidole.megacephala",
"_EMcaByTSS_mergedAlgo_mergedRun_mergedData_TSSbin.gri")))
##CAZ with weights##
#Pheidole megacephala
PM_bin <- rast(raster(here(regional_model_path,
"Pheidole.megacephala",
"proj_regional",
"individual_projections",
paste0("Pheidole.megacephala",
"_EMcaByTSS_mergedAlgo_mergedRun_mergedData_TSSbin.gri"))))
PM_bin2 <- PM_bin
PM_bin2[PM_bin2 != 0] <- 1
# Re-class zeros as NA
PM_bin[PM_bin == 0] <- NA
?resample
full_rank_stack
#get equal extent
PM_spec_bin <- resample(PM_bin, full_rank_stack[[2]], method = "near")
full_rank_stack[[7]]
full_rank_stack[[8]]
full_rank_stack[[9]]
full_rank_stack[[13]]
full_rank_stack[[15]]
full_rank_stack[[19]]
full_rank_stack[[20]]
full_rank_stack[[25]]
PM_spec_bin
bin_list <- list(PM_spec_bin)
names(bin_list)
names(bin_list[[1]])
## Susceptible site prep
susc_site_prep <- function(species_name, ras_stack){
sp <- gsub(" ", ".", species_name)
bin <- rast(raster(here(regional_model_path,
sp,
"proj_regional",
"individual_projections",
paste0(sp,
"_EMcaByTSS_mergedAlgo_mergedRun_mergedData_TSSbin.gri"))))
bin2 <- bin
bin2[bin2 != 0] <- 1
# Re-class zeros as NA
bin[bin == 0] <- NA
bin_list <- list()
for(i in 1:length(ras_stack)){
bin_list[[i]] <- resample(bin, ras_stack[[i]], method = "near")
names(bin_list[[i]]) <- names(ras_stack[[i]])
}
return(list(bin_list, bin2))
}
##IAS SDMs##
spp_list <- c("Apis mellifera",  "Monomorium floricola",
"Monomorium destructor","Linepithema humile", "Vespula vulgaris",
"Bombus terrestris", "Heteronychus arator",
"Digitonthophagus gazella", "Pheidole megacephala",
"Vespula germanica","Tetramorium bicarinatum",
"Paratrechina longicornis")
##CAZ with weights##
susceptible_site_prep <- susc_site_prep(spp_list, full_rank_stack)
##CAZ with weights##
for(spp in spp_list){
susceptible_site_prep <- susc_site_prep(spp, full_rank_stack)
}
View(susceptible_site_prep)
susceptible_site_prep
spp_list[1:length(spp_list)]
lapply(spp_list[1:length(spp_list)], function(i){
susceptible_site_prep <- susc_site_prep(i, full_rank_stack)
})
## Susceptible site prep
susc_site_prep <- function(species_name, ras_stack){
sp <- gsub(" ", ".", species_name)
bin <- rast(raster(here(regional_model_path,
sp,
"proj_regional",
"individual_projections",
paste0(sp,
"_EMcaByTSS_mergedAlgo_mergedRun_mergedData_TSSbin.gri"))))
bin2 <- bin
bin2[bin2 != 0] <- 1
# Re-class zeros as NA
bin[bin == 0] <- NA
bin_list <- list()
for(i in 1:length(ras_stack)){
bin_list[[i]] <- resample(bin, ras_stack[[i]], method = "near")
names(bin_list[[i]]) <- names(ras_stack[[i]])
}
return(bin_list, bin2)
}
lapply(spp_list[1:length(spp_list)], function(i){
susceptible_site_prep <- susc_site_prep(i, full_rank_stack)
})
## Susceptible site prep
susc_site_prep <- function(species_name, ras_stack){
sp <- gsub(" ", ".", species_name)
bin <- rast(raster(here(regional_model_path,
sp,
"proj_regional",
"individual_projections",
paste0(sp,
"_EMcaByTSS_mergedAlgo_mergedRun_mergedData_TSSbin.gri"))))
bin2 <- bin
bin2[bin2 != 0] <- 1
# Re-class zeros as NA
bin[bin == 0] <- NA
bin_list <- list()
for(i in 1:length(ras_stack)){
bin_list[[i]] <- resample(bin, ras_stack[[i]], method = "near")
names(bin_list[[i]]) <- names(ras_stack[[i]])
}
return(c(bin_list, bin2))
}
lapply(spp_list[1:length(spp_list)], function(i){
susceptible_site_prep <- susc_site_prep(i, full_rank_stack)
})
length(full_rank_stack)
nlyr(full_rank_stack)
susceptible_site_prep
## Susceptible site prep
susc_site_prep <- function(species_name, ras_stack){
sp <- gsub(" ", ".", species_name)
bin <- rast(raster(here(regional_model_path,
sp,
"proj_regional",
"individual_projections",
paste0(sp,
"_EMcaByTSS_mergedAlgo_mergedRun_mergedData_TSSbin.gri"))))
bin2 <- bin
bin2[bin2 != 0] <- 1
# Re-class zeros as NA
bin[bin == 0] <- NA
bin_list <- list()
for(i in 1:nlyr(ras_stack)){
bin_list[[i]] <- resample(bin, ras_stack[[i]], method = "near")
names(bin_list[[i]]) <- names(ras_stack[[i]])
}
return(list(bin_list, bin2))
}
##CAZ with weights##
lapply(spp_list[1:length(spp_list)], function(i){
susceptible_site_prep <- susc_site_prep(i, full_rank_stack)
})
susceptible_site_prep
gc()
##CAZ with weights##
susceptible_site_prep <- lapply(spp_list[1:length(spp_list)], function(i){
susc_site_prep(i, full_rank_stack)
})
View(susceptible_site_prep)
gc()
length(susceptible_site_prep)
susceptible_site_prep[[1]]
susceptible_site_prep[[1]][[2]]
susceptible_site_prep[[1]][[1]][[25]]
nlyr(full_rank_stack)
####################### Priority sites - species + weights #####################
species_list <- list()
vals_list <- list()
gc()
for(i in 1:length(susceptible_site_prep)){
for(j in 1:nlyr(full_rank_stack)){
if(i == j){
vals <- get_msk_vals(full_rank_stack[[j]],
susceptible_site_prep[[i]][[1]][[j]])
vals_list[[j]] <- vals
}
}
species_list[[i]] <- vals_list
}
#Get cell values for Kolmogorov-smirnoff tests
get_msk_vals <- function(rank_raster, mask_file) {
temp_r <- mask(rank_raster, mask_file)
temp_r_values <- na.omit(values(temp_r))
}
for(i in 1:length(susceptible_site_prep)){
for(j in 1:nlyr(full_rank_stack)){
if(i == j){
vals <- get_msk_vals(full_rank_stack[[j]],
susceptible_site_prep[[i]][[1]][[j]])
vals_list[[j]] <- vals
}
}
species_list[[i]] <- vals_list
}
View(species_list)
length(susceptible_site_prep) == nlyr(full_rank_stack)
####################### Priority sites - species + weights #####################
species_list <- list()
vals_list <- list()
for(i in 1:length(susceptible_site_prep)){
for(j in 1:nlyr(full_rank_stack)){
for(k in 1:nlyr(full_rank_stack)){
if(j == k){
vals <- get_msk_vals(full_rank_stack[[j]],
susceptible_site_prep[[i]][[1]][[k]])
vals_list[[j]] <- vals
}
}
}
species_list[[i]] <- vals_list
}
View(species_list)
names(susceptible_site_prep)
names(susceptible_site_prep[[1]])
susceptible_site_prep[[1]]
names(susceptible_site_prep[[1]]) <- "Apis meliffera"
susceptible_site_prep[[1]]
susceptible_site_prep[[1]]$a
susceptible_site_prep[1]
susceptible_site_prep[2]
susceptible_site_prep
head(susceptible_site_prep)
species_list[[8]]
AM_vals <- c(species_list[[2]], species_list[[8]])
View(AM_vals)
AM_vals <- c(species_list[[1]][[2]], species_list[[1]][[8]])
nms <- c(rep("Am", length(AM_vals)))
type <- c(rep("species", length(species_list[[1]][[2]])),
rep("KBA", length(species_list[[1]][[2]])))
meds <- c(rep(median(species_list[[1]][[2]]), length(species_list[[1]][[2]])))
df <- data.frame(nms, type, AM_vals, meds)
val_plot_1 <- ggplot(df, aes(x = vals, y = nms, fill = type)) +
geom_violin(draw_quantiles = 0.5,
adjust = 0.2, #changes the smoothness; lower is more faithful to the data
scale = "width") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_blank(),
strip.text.x = element_text(size = 12),
axis.text.y = element_text(face = "italic"),
legend.position = "top") +
scale_fill_manual(values = c("#66B2FF", "#FFB266"),
labels = c("KBA mask", "species + weight"),
name = "Scenarios") +
scale_y_discrete(limits = rev)
val_plot_1
df
ggplot(df, aes(x = AM_vals, y = nms, fill = type)) +
geom_violin(draw_quantiles = 0.5,
adjust = 0.2, #changes the smoothness; lower is more faithful to the data
scale = "width") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_blank(),
strip.text.x = element_text(size = 12),
axis.text.y = element_text(face = "italic"),
legend.position = "top") +
scale_fill_manual(values = c("#66B2FF", "#FFB266"),
labels = c("KBA mask", "species + weight"),
name = "Scenarios") +
scale_y_discrete(limits = rev)
wilcox.test(df)
wilcox.test(df$AM_vals~df$type)
gc()
species_list[[1]][[1:5]]
species_list[[1]][1:5]
t1 <- c(species_list[[1]][[2]], species_list[[1]][[8]])
t2 <- species_list[[1]][1:25]
length(t2) == length(t1)
t2 <- as.numeric(species_list[[1]][1:25])
t2 <- as.vector(species_list[[1]][1:25])
t2 <- unlist(species_list[[1]][1:25])
t2 <- unlist(species_list[[1]][1:2])
t2 == t1
t1 <- c(species_list[[1]][[1]], species_list[[1]][[2]])
t2 <- unlist(species_list[[1]][1:2])
t2 == t1
length(species_list[[1]])
length(species_list)
gc()
names(species_list)
names(species_list[[1]])
names(species_list)[1]
spp_list
names(species_list) <- spp_list
names(species_list)
species_list[[1]]
View(species_list)
species_list[[1]][[1]]
gc()
View(species_list)
51653/25
length(species_list[[1]])
names(full_rank_stack)[1]
length(species_list[[1]][[1]])
length(species_list[[1]][[2]])
length(species_list[[1]][[3]])
#AM_vals <- c(species_list[[1]][[2]], species_list[[1]][[8]])
vals <- c()
nms <- c()
type <- c()
for(i in 1:length(species_list)){
spv <- unlist(species_list[[i]][1:length(species_list[[i]])])
vals <- c(vals, spv)
spn <- rep(spp_list[i], length(species_list[[i]]))
nms <- c(nms, spn)
for(j in 1:length(species_list[[i]])){
spt <- rep(names(full_rank_stack)[j], length(species_list[[i]][[1]]))
type <- c(type, spt)
}
}
length(species_list[[1]])
vals <- c()
nms <- c()
type <- c()
for(i in 1:length(species_list)){
spv <- unlist(species_list[[i]][1:length(species_list[[i]])])
vals <- c(vals, spv)
spn <- rep(spp_list[i], length(spv))
nms <- c(nms, spn)
for(j in 1:length(species_list[[i]])){
spt <- rep(names(full_rank_stack)[j], length(species_list[[i]][[1]]))
type <- c(type, spt)
}
}
length(unlist(specieli))
length(unlist(species_list))
#AM_vals <- c(species_list[[1]][[2]], species_list[[1]][[8]])
vals <- c()
nms <- c()
type <- c()
for(i in 1:length(species_list)){
spv <- unlist(species_list[[i]][1:length(species_list[[i]])])
vals <- c(vals, spv)
spn <- rep(spp_list[i], length(spv))
nms <- c(nms, spn)
for(j in 1:length(species_list[[i]])){
spt <- rep(names(full_rank_stack)[j], length(species_list[[i]][[j]]))
type <- c(type, spt)
}
}
df <- data.frame(nms, type, vals)
head(df)
unique(df$nms)
unique(df$type)
gc()
#Difference between species + weight IAS
species_weight_df <- df %>%
filter(type == "species_weight")
head(df)
ggstatsplot::ggbetweenstats(data = df,
y = vals,
x = nms,
type = "nonparametric",
pairwise.display = "non-significant",
p.adjust.method = "bonferroni",
package = "awtools",
palette = "bpalette",
xlab = "Insect species",
ylab = "Priority site distribution",
ggtheme = ggplot2::theme_bw())
install.packages("rlang")
