gc()
for(i in 1:length(susceptible_site_prep)){
for(j in 1:nlyr(full_rank_stack)){
if(i == j){
vals <- get_msk_vals(full_rank_stack[[j]],
susceptible_site_prep[[i]][[1]][[j]])
vals_list[[j]] <- vals
}
}
species_list[[i]] <- vals_list
}
#Get cell values for Kolmogorov-smirnoff tests
get_msk_vals <- function(rank_raster, mask_file) {
temp_r <- mask(rank_raster, mask_file)
temp_r_values <- na.omit(values(temp_r))
}
for(i in 1:length(susceptible_site_prep)){
for(j in 1:nlyr(full_rank_stack)){
if(i == j){
vals <- get_msk_vals(full_rank_stack[[j]],
susceptible_site_prep[[i]][[1]][[j]])
vals_list[[j]] <- vals
}
}
species_list[[i]] <- vals_list
}
View(species_list)
length(susceptible_site_prep) == nlyr(full_rank_stack)
####################### Priority sites - species + weights #####################
species_list <- list()
vals_list <- list()
for(i in 1:length(susceptible_site_prep)){
for(j in 1:nlyr(full_rank_stack)){
for(k in 1:nlyr(full_rank_stack)){
if(j == k){
vals <- get_msk_vals(full_rank_stack[[j]],
susceptible_site_prep[[i]][[1]][[k]])
vals_list[[j]] <- vals
}
}
}
species_list[[i]] <- vals_list
}
View(species_list)
names(susceptible_site_prep)
names(susceptible_site_prep[[1]])
susceptible_site_prep[[1]]
names(susceptible_site_prep[[1]]) <- "Apis meliffera"
susceptible_site_prep[[1]]
susceptible_site_prep[[1]]$a
susceptible_site_prep[1]
susceptible_site_prep[2]
susceptible_site_prep
head(susceptible_site_prep)
species_list[[8]]
AM_vals <- c(species_list[[2]], species_list[[8]])
View(AM_vals)
AM_vals <- c(species_list[[1]][[2]], species_list[[1]][[8]])
nms <- c(rep("Am", length(AM_vals)))
type <- c(rep("species", length(species_list[[1]][[2]])),
rep("KBA", length(species_list[[1]][[2]])))
meds <- c(rep(median(species_list[[1]][[2]]), length(species_list[[1]][[2]])))
df <- data.frame(nms, type, AM_vals, meds)
val_plot_1 <- ggplot(df, aes(x = vals, y = nms, fill = type)) +
geom_violin(draw_quantiles = 0.5,
adjust = 0.2, #changes the smoothness; lower is more faithful to the data
scale = "width") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_blank(),
strip.text.x = element_text(size = 12),
axis.text.y = element_text(face = "italic"),
legend.position = "top") +
scale_fill_manual(values = c("#66B2FF", "#FFB266"),
labels = c("KBA mask", "species + weight"),
name = "Scenarios") +
scale_y_discrete(limits = rev)
val_plot_1
df
ggplot(df, aes(x = AM_vals, y = nms, fill = type)) +
geom_violin(draw_quantiles = 0.5,
adjust = 0.2, #changes the smoothness; lower is more faithful to the data
scale = "width") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_blank(),
strip.text.x = element_text(size = 12),
axis.text.y = element_text(face = "italic"),
legend.position = "top") +
scale_fill_manual(values = c("#66B2FF", "#FFB266"),
labels = c("KBA mask", "species + weight"),
name = "Scenarios") +
scale_y_discrete(limits = rev)
wilcox.test(df)
wilcox.test(df$AM_vals~df$type)
gc()
species_list[[1]][[1:5]]
species_list[[1]][1:5]
t1 <- c(species_list[[1]][[2]], species_list[[1]][[8]])
t2 <- species_list[[1]][1:25]
length(t2) == length(t1)
t2 <- as.numeric(species_list[[1]][1:25])
t2 <- as.vector(species_list[[1]][1:25])
t2 <- unlist(species_list[[1]][1:25])
t2 <- unlist(species_list[[1]][1:2])
t2 == t1
t1 <- c(species_list[[1]][[1]], species_list[[1]][[2]])
t2 <- unlist(species_list[[1]][1:2])
t2 == t1
length(species_list[[1]])
length(species_list)
gc()
names(species_list)
names(species_list[[1]])
names(species_list)[1]
spp_list
names(species_list) <- spp_list
names(species_list)
species_list[[1]]
View(species_list)
species_list[[1]][[1]]
gc()
View(species_list)
51653/25
length(species_list[[1]])
names(full_rank_stack)[1]
length(species_list[[1]][[1]])
length(species_list[[1]][[2]])
length(species_list[[1]][[3]])
#AM_vals <- c(species_list[[1]][[2]], species_list[[1]][[8]])
vals <- c()
nms <- c()
type <- c()
for(i in 1:length(species_list)){
spv <- unlist(species_list[[i]][1:length(species_list[[i]])])
vals <- c(vals, spv)
spn <- rep(spp_list[i], length(species_list[[i]]))
nms <- c(nms, spn)
for(j in 1:length(species_list[[i]])){
spt <- rep(names(full_rank_stack)[j], length(species_list[[i]][[1]]))
type <- c(type, spt)
}
}
length(species_list[[1]])
vals <- c()
nms <- c()
type <- c()
for(i in 1:length(species_list)){
spv <- unlist(species_list[[i]][1:length(species_list[[i]])])
vals <- c(vals, spv)
spn <- rep(spp_list[i], length(spv))
nms <- c(nms, spn)
for(j in 1:length(species_list[[i]])){
spt <- rep(names(full_rank_stack)[j], length(species_list[[i]][[1]]))
type <- c(type, spt)
}
}
length(unlist(specieli))
length(unlist(species_list))
#AM_vals <- c(species_list[[1]][[2]], species_list[[1]][[8]])
vals <- c()
nms <- c()
type <- c()
for(i in 1:length(species_list)){
spv <- unlist(species_list[[i]][1:length(species_list[[i]])])
vals <- c(vals, spv)
spn <- rep(spp_list[i], length(spv))
nms <- c(nms, spn)
for(j in 1:length(species_list[[i]])){
spt <- rep(names(full_rank_stack)[j], length(species_list[[i]][[j]]))
type <- c(type, spt)
}
}
df <- data.frame(nms, type, vals)
head(df)
unique(df$nms)
unique(df$type)
gc()
#Difference between species + weight IAS
species_weight_df <- df %>%
filter(type == "species_weight")
head(df)
ggstatsplot::ggbetweenstats(data = df,
y = vals,
x = nms,
type = "nonparametric",
pairwise.display = "non-significant",
p.adjust.method = "bonferroni",
package = "awtools",
palette = "bpalette",
xlab = "Insect species",
ylab = "Priority site distribution",
ggtheme = ggplot2::theme_bw())
install.packages("rlang")
library(rlang)
detach("package:rlang", unload = TRUE)
install.packages("rlang")
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
.rs.restartR()
install.packages("rlang")
##IAS SDMs##
spp_list <- c("Apis mellifera",  "Monomorium floricola",
"Monomorium destructor","Linepithema humile", "Vespula vulgaris",
"Bombus terrestris", "Heteronychus arator",
"Digitonthophagus gazella", "Pheidole megacephala",
"Vespula germanica","Tetramorium bicarinatum",
"Paratrechina longicornis")
pkgs <- c("tidyverse", "sf", "terra", "stars", "here")
lapply(pkgs, require, character.only = T)
source("R/01_new_functions.R")
z_colors_spectral <- list(values=c(0.0, 0.2, 0.5, 0.75, 0.9, 0.95, 0.98, 1.0),
labels=c("0.00-0.20", "0.20-0.50", "0.50-0.75",
"0.75-0.90", "0.90-0.95", "0.95-0.98",
"0.98-1.00"),
colors=c("#2b83ba", "#80bfab", "#c7e8ad", "#ffffbf",
"#fdc980", "#f07c4a", "#d7191c"))
species_path <- "C:/Users/dcla0021/Documents/postdoc/projects/site_prioritisation/zonation/species_scenarios"
species_area_path <- "C:/Users/dcla0021/Documents/postdoc/projects/site_prioritisation/zonation/species_area_scenarios"
species_scenarios <- c("species_equal", "species_weight", "species_scheme_1",
"species_scheme_2", "species_scheme_3", "species_scheme_4",
"species_equal_KBA", "species_weight_KBA", "species_scheme_1_KBA",
"species_scheme_2_KBA", "species_scheme_3_KBA", "species_scheme_4_KBA",
"species_random")
species_area_scenarios <- c("species_area_equal", "species_area_weight", "species_area_scheme_1",
#"species_area_scheme_2", #haven't run this scenario
"species_area_scheme_3", "species_area_scheme_4",
"species_area_equal_KBA", "species_area_weight_KBA", "species_area_scheme_1_KBA",
"species_area_scheme_2_KBA", "species_area_scheme_3_KBA", "species_area_scheme_4_KBA",
"species_area_random")
species_rank_stack <- rast()
for(sp in species_scenarios){
ind <- which(species_scenarios == sp)
r <- rast(here(species_path, sp, "output", "rankmap.tif"))
names(r) <- sp
species_rank_stack <- c(species_rank_stack, r)
# species_fig_list[[ind]] <- rank_plot(r)
# ggsave(plot = species_fig_list[[ind]],
#        filename = paste0(sp, "_rankmap.pdf"),
#        device = cairo_pdf,
#        dpi = 300,
#        path = here(dirname(here()), "figures")) #dirname() lets you go one folder up
}
species_area_rank_stack <- rast()
for(sp in species_area_scenarios){
ind <- which(species_area_scenarios == sp)
r <- rast(here(species_area_path, sp, "output", "rankmap.tif"))
names(r) <- sp
species_area_rank_stack <- c(species_area_rank_stack, r)
# species_area_fig_list[[ind]] <- rank_plot(r)
# ggsave(plot = species_area_fig_list[[ind]],
#        filename = paste0(sp, "_rankmap.pdf"),
#        device = cairo_pdf,
#        dpi = 300,
#        path = here(dirname(here()), "figures")) #dirname() lets you go one folder up
}
full_rank_stack <- c(species_rank_stack, species_area_rank_stack)
##CAZ with weights##
susceptible_site_prep <- lapply(spp_list[1:length(spp_list)], function(i){
susc_site_prep(i, full_rank_stack)
})
source("R/01_new_functions.R")
##CAZ with weights##
susceptible_site_prep <- lapply(spp_list[1:length(spp_list)], function(i){
susc_site_prep(i, full_rank_stack)
})
library(raster)
##CAZ with weights##
susceptible_site_prep <- lapply(spp_list[1:length(spp_list)], function(i){
susc_site_prep(i, full_rank_stack)
})
library(terra)
################################################################################
#Susceptible sites
#external hard drive
#regional_model_path <- "G:/Chapter_3/SpatialData/IAS_distributions/IAS_regional"
regional_model_path <- here(dirname(here()), "IAS_regional")
##CAZ with weights##
susceptible_site_prep <- lapply(spp_list[1:length(spp_list)], function(i){
susc_site_prep(i, full_rank_stack)
})
species_list <- list()
vals_list <- list()
for(i in 1:length(susceptible_site_prep)){
for(j in 1:nlyr(full_rank_stack)){
for(k in 1:nlyr(full_rank_stack)){
if(j == k){
vals <- get_msk_vals(full_rank_stack[[j]],
susceptible_site_prep[[i]][[1]][[k]])
vals_list[[j]] <- vals
}
}
}
species_list[[i]] <- vals_list
}
## Get site sensitivity values----
get_msk_vals <- function(rank_raster, mask_file) {
temp_r <- mask(rank_raster, mask_file)
temp_r_values <- na.omit(values(temp_r))
}
species_list <- list()
vals_list <- list()
for(i in 1:length(susceptible_site_prep)){
for(j in 1:nlyr(full_rank_stack)){
for(k in 1:nlyr(full_rank_stack)){
if(j == k){
vals <- get_msk_vals(full_rank_stack[[j]],
susceptible_site_prep[[i]][[1]][[k]])
vals_list[[j]] <- vals
}
}
}
species_list[[i]] <- vals_list
}
names(species_list) <- spp_list
vals <- c()
nms <- c()
type <- c()
for(i in 1:length(species_list)){
spv <- unlist(species_list[[i]][1:length(species_list[[i]])])
vals <- c(vals, spv)
spn <- rep(spp_list[i], length(spv))
nms <- c(nms, spn)
for(j in 1:length(species_list[[i]])){
spt <- rep(names(full_rank_stack)[j], length(species_list[[i]][[j]]))
type <- c(type, spt)
}
}
df <- data.frame(nms, type, vals)
#Difference between species + weight IAS
species_weight_df <- df %>%
filter(type == "species_weight")
head(species_weight_df)
ggstatsplot::ggbetweenstats(data = species_weight_df,
y = vals,
x = nms,
type = "nonparametric",
pairwise.display = "non-significant",
p.adjust.method = "bonferroni",
package = "awtools",
palette = "bpalette",
xlab = "Insect species",
ylab = "Priority site distribution",
ggtheme = ggplot2::theme_bw())
gc()
ggstatsplot::ggbetweenstats(data = species_weight_df,
y = vals,
x = nms,
type = "nonparametric",
pairwise.display = "significant",
p.adjust.method = "bonferroni",
package = "awtools",
palette = "bpalette",
xlab = "Insect species",
ylab = "Priority site distribution",
ggtheme = ggplot2::theme_bw())
str_split(spp_list[1], " ")
as.vector(str_split(spp_list[1], " "))
unlist(str_split(spp_list[1], " "))
substr(unlist(str_split(spp_list[1], " ")), start = 1, stop = 1)
paste0(substr(unlist(str_split(spp_list[1], " ")), start = 1, stop = 1))
cc <- substr(unlist(str_split(spp_list[1], " ")), start = 1, stop = 1)
paste0(cc)
paste0(cc, collapse = " ")
paste0(cc, collapse = "")
paste0(substr(unlist(str_split(spp_list[1], " ")), start = 1, stop = 1), collapse = "")
vals <- c()
nms <- c()
type <- c()
code <- c()
for(i in 1:length(species_list)){
spv <- unlist(species_list[[i]][1:length(species_list[[i]])])
vals <- c(vals, spv)
spn <- rep(spp_list[i], length(spv))
nms <- c(nms, spn)
cc <- paste0(substr(unlist(str_split(spp_list[i], " ")), start = 1, stop = 1), collapse = "")
spc <- rep(cc, length(spv))
code <- c(code, spc)
for(j in 1:length(species_list[[i]])){
spt <- rep(names(full_rank_stack)[j], length(species_list[[i]][[j]]))
type <- c(type, spt)
}
}
df <- data.frame(nms, code, type, vals)
gc()
head(df)
tail(df)
gc()
head(df)
## Proportion difference (KBA vs no KBA) in number of top sensitive sites----
#vals = output from get_msk_vals, sens = site sensitivity value
prop_diff <- function(vals, sens) {
vals_bin <- vals
vals_bin <- ifelse(vals_bin >= sens, 1,0)
sum(vals_bin)/length(vals_bin)*100
}
## Get proportion differences----
multi_props <- function(vals, props){
diffs <- c()
for(i in props[1:length(props)]){
d <- prop_diff(vals, i)
diffs <- c(diffs,d)
}
names(diffs) <- c("1.00", "0.98", "0.95", "0.90", "0.75", "0.50", "0.25",
"0.00")
return(diffs)
}
#Proportion difference (KBA vs no KBA vs Random) in number of top sensitive sites
#Top two (i.e. >= 0.98 sensitivity)
props <- c(1, 0.98, 0.95, 0.90, 0.75, 0.50, 0.25, 0.00)
ddf <- df %>% filter(type == "species_weight")
ddf <- df %>% filter(type == "species_weight") %>% filter(code == "Am")
multi_props(ddf$vals, props)
types <- unique(type)
ff <- multi_props(ddf$vals, props)
names(ff)
ddf[[vals]]
ddf[["vals"]]
sp_props <- c()
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
}
}
gc()
sp_props <- c()
sp <- c()
ty <- c()
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
sp <- rep(ss, nrow(st))
ty <- rep(tt, nrow(st))
}
}
length(sp_props) == length(sp) == length(ty)
length(sp_props) == length(sp)
sp_props <- c()
sp_name <- c()
tyt <- c()
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
sp <- rep(ss, nrow(st))
sp_name <- c(sp_name, sp)
ty <- rep(tt, nrow(st))
tyt <- c(tyt, ty)
}
}
length(sp_props) == length(sp_name)
length(sp_props) == length(tyt)
View(st)
sp_props <- c(sp_props,mp)
sp_props
sp_props <- c()
sp_name <- c()
tyt <- c()
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
sp <- rep(ss, nrow(sp_props))
sp_name <- c(sp_name, sp)
ty <- rep(tt, nrow(sp_props))
tyt <- c(tyt, ty)
}
}
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
sp <- rep(ss, length(sp_props))
sp_name <- c(sp_name, sp)
ty <- rep(tt, length(sp_props))
tyt <- c(tyt, ty)
}
}
length(sp_props) == length(tyt)
sp_props <- c()
sp_name <- c()
tyt <- c()
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
sp <- rep(ss, length(mp))
sp_name <- c(sp_name, sp)
ty <- rep(tt, length(mp))
tyt <- c(tyt, ty)
}
}
length(sp_props) == length(tyt)
