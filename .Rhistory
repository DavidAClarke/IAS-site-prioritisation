head(df)
tail(df)
gc()
head(df)
## Proportion difference (KBA vs no KBA) in number of top sensitive sites----
#vals = output from get_msk_vals, sens = site sensitivity value
prop_diff <- function(vals, sens) {
vals_bin <- vals
vals_bin <- ifelse(vals_bin >= sens, 1,0)
sum(vals_bin)/length(vals_bin)*100
}
## Get proportion differences----
multi_props <- function(vals, props){
diffs <- c()
for(i in props[1:length(props)]){
d <- prop_diff(vals, i)
diffs <- c(diffs,d)
}
names(diffs) <- c("1.00", "0.98", "0.95", "0.90", "0.75", "0.50", "0.25",
"0.00")
return(diffs)
}
#Proportion difference (KBA vs no KBA vs Random) in number of top sensitive sites
#Top two (i.e. >= 0.98 sensitivity)
props <- c(1, 0.98, 0.95, 0.90, 0.75, 0.50, 0.25, 0.00)
ddf <- df %>% filter(type == "species_weight")
ddf <- df %>% filter(type == "species_weight") %>% filter(code == "Am")
multi_props(ddf$vals, props)
types <- unique(type)
ff <- multi_props(ddf$vals, props)
names(ff)
ddf[[vals]]
ddf[["vals"]]
sp_props <- c()
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
}
}
gc()
sp_props <- c()
sp <- c()
ty <- c()
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
sp <- rep(ss, nrow(st))
ty <- rep(tt, nrow(st))
}
}
length(sp_props) == length(sp) == length(ty)
length(sp_props) == length(sp)
sp_props <- c()
sp_name <- c()
tyt <- c()
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
sp <- rep(ss, nrow(st))
sp_name <- c(sp_name, sp)
ty <- rep(tt, nrow(st))
tyt <- c(tyt, ty)
}
}
length(sp_props) == length(sp_name)
length(sp_props) == length(tyt)
View(st)
sp_props <- c(sp_props,mp)
sp_props
sp_props <- c()
sp_name <- c()
tyt <- c()
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
sp <- rep(ss, nrow(sp_props))
sp_name <- c(sp_name, sp)
ty <- rep(tt, nrow(sp_props))
tyt <- c(tyt, ty)
}
}
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
sp <- rep(ss, length(sp_props))
sp_name <- c(sp_name, sp)
ty <- rep(tt, length(sp_props))
tyt <- c(tyt, ty)
}
}
length(sp_props) == length(tyt)
sp_props <- c()
sp_name <- c()
tyt <- c()
for(ss in spp_list){
for(tt in types){
st <- df %>% filter(nms == ss) %>% filter(type == tt)
mp <- multi_props(st$vals, props)
sp_props <- c(sp_props,mp)
sp <- rep(ss, length(mp))
sp_name <- c(sp_name, sp)
ty <- rep(tt, length(mp))
tyt <- c(tyt, ty)
}
}
length(sp_props) == length(tyt)
pkgs <- c("tidyverse", "here")
lapply(pkgs, require, character.only = T)
here(dirname(here()), "zonation")
species_area_path <- here(dirname(here()), "data","species_area_lowres")
###############################################################################
## Species area scenarios
spp_list <- read.csv(here(zonation_path, "spp_area_list_upd.csv")) %>%
filter(acceptedName != "Morelia spilota") #files are corrupted
zonation_path <- here(dirname(here()), "data", "zonation")
###############################################################################
## Species area scenarios
spp_list <- read.csv(here(zonation_path, "spp_area_list_upd.csv")) %>%
filter(acceptedName != "Morelia spilota") #files are corrupted
weight_df <- data.frame(equal = rep(1, nrow(spp_list)), spp_list[,11:15])
nm <- names(weight_df)[4]
dir.create(here(zonation_path, "species_area_scenarios", paste0("species_area_",nm)))
dir.create(here(zonation_path, "species_area_scenarios", paste0("species_area_",nm)))
variant_path <- here(zonation_path, "species_area_scenarios", paste0("species_area_",nm))
feature_list <- data.frame(weight = weight_df[,4],
group = spp_list$classGroupNum,
filename = list.files(species_area_path, full.names = T))
write.table(feature_list,
file = here(variant_path,"features.txt"), row.names = F)
Settings <- paste("feature list file =", here(variant_path,"features.txt"))
fileConn <- file(here(variant_path, paste0("species_area_",nm,".z5")))
writeLines(Settings, fileConn)
close(fileConn)
install.packages("Cairo")
rm(list = ls())
gc()
pkgs <- c("tidyverse", "sf", "terra", "stars", "here")
lapply(pkgs, require, character.only = T)
source("R/01_new_functions.R")
z_colors_spectral <- list(values=c(0.0, 0.2, 0.5, 0.75, 0.9, 0.95, 0.98, 1.0),
labels=c("0.00-0.20", "0.20-0.50", "0.50-0.75",
"0.75-0.90", "0.90-0.95", "0.95-0.98",
"0.98-1.00"),
colors=c("#2b83ba", "#80bfab", "#c7e8ad", "#ffffbf",
"#fdc980", "#f07c4a", "#d7191c"))
here(dirname(here()))
species_path <- here(dirname(here()), "data", "zonation", "species_scenarios")
species_area_path <- here(dirname(here()), "data", "zonation", "species_area_scenarios")
species_scenarios <- c("species_equal", "species_weight", "species_scheme_1",
"species_scheme_2", "species_scheme_3", "species_scheme_4",
"species_equal_KBA", "species_weight_KBA", "species_scheme_1_KBA",
"species_scheme_2_KBA", "species_scheme_3_KBA", "species_scheme_4_KBA",
"species_random")
species_area_scenarios <- c("species_area_equal", "species_area_weight", "species_area_scheme_1",
"species_area_scheme_2",
"species_area_scheme_3", "species_area_scheme_4",
"species_area_equal_KBA", "species_area_weight_KBA", "species_area_scheme_1_KBA",
"species_area_scheme_2_KBA", "species_area_scheme_3_KBA", "species_area_scheme_4_KBA",
"species_area_random")
species_fig_list <- list()
species_rank_stack <- rast()
for(sp in species_scenarios){
ind <- which(species_scenarios == sp)
r <- rast(here(species_path, sp, "output", "rankmap.tif"))
names(r) <- sp
species_rank_stack <- c(species_rank_stack, r)
species_fig_list[[ind]] <- rank_plot(r)
ggsave(plot = species_fig_list[[ind]],
filename = paste0(sp, "_rankmap.pdf"),
device = cairo_pdf,
dpi = 300,
path = here(dirname(here()), "figures")) #dirname() lets you go one folder up
}
gc()
species_area_fig_list <- list()
species_area_rank_stack <- rast()
for(sp in species_area_scenarios){
ind <- which(species_area_scenarios == sp)
r <- rast(here(species_area_path, sp, "output", "rankmap.tif"))
names(r) <- sp
species_area_rank_stack <- c(species_area_rank_stack, r)
species_area_fig_list[[ind]] <- rank_plot(r)
ggsave(plot = species_area_fig_list[[ind]],
filename = paste0(sp, "_rankmap.pdf"),
device = cairo_pdf,
dpi = 300,
path = here(dirname(here()), "figures")) #dirname() lets you go one folder up
}
full_rank_stack <- c(species_rank_stack, species_area_rank_stack)
gc()
rm(species_area_fig_list, species_fig_list)
gc()
priority_cors <- ras_cor(full_rank_stack)
library(raster)
all_names <- names(full_rank_stack)
#Top 2%
top_two <- calculate_jaccards(stack(full_rank_stack), x.min = 0.98, x.max = 1.0,
y.min = 0.98,y.max = 1.0,all_names)
#Top 5%
top_five <- calculate_jaccards(stack(full_rank_stack), x.min = 0.95, x.max = 1.0,
y.min = 0.95,y.max = 1.0,all_names)
#Top 10%
top_ten <- calculate_jaccards(stack(full_rank_stack), x.min = 0.9, x.max = 1.0,
y.min = 0.9,y.max = 1.0,all_names)
#Top 25%
top_twentyfive <- calculate_jaccards(stack(full_rank_stack), x.min = 0.75, x.max = 1.0,
y.min = 0.75,y.max = 1.0,all_names)
#Top 50%
top_fifty <- calculate_jaccards(stack(full_rank_stack), x.min = 0.5, x.max = 1.0,
y.min = 0.5,y.max = 1.0,all_names)
#Top 80%
top_eighty <- calculate_jaccards(stack(full_rank_stack), x.min = 0.2, x.max = 1.0,
y.min = 0.2,y.max = 1.0,all_names)
#Total
total <- calculate_jaccards(stack(full_rank_stack), x.min = 0.0, x.max = 1.0,
y.min = 0.0,y.max = 1.0,all_names)
write.csv(top_two, file = here(dirname(here()), "data", "zonation", "jaccard_two.csv"), na = "-", row.names = T)
write.csv(top_five, file = here(dirname(here()),"data", "zonation", "jaccard_five.csv"), na = "-", row.names = T)
write.csv(top_ten, file = here(dirname(here()),"data", "zonation", "jaccard_ten.csv"), na = "-", row.names = T)
write.csv(top_twentyfive, here(dirname(here()),"data", "zonation", "jaccard_twentyfive.csv"), na = "-", row.names = T)
write.csv(top_fifty, file = here(dirname(here()),"data", "zonation", "jaccard_fifty.csv"), na = "-", row.names = T)
write.csv(top_eighty, file = here(dirname(here()),"data", "zonation", "jaccard_eighty.csv"), na = "-", row.names = T)
write.csv(total, file = here(dirname(here()), "data","zonation", "jaccard_total.csv"), na = "-", row.names = T)
install.packages("remotes")
remotes::install_github("anthonynorth/rscodeio")
rscodeio::install_theme()
rscodeio::install_theme()
rscodeio::install_theme()
## Load data
spp_list <- read.csv(here(dirname(here()), "data", "maxent_spp_list.csv"))
library(here)
install.packages("here")
install.packages("tidyverse")
library(tidyverse)
## Load data
spp_list <- read.csv(here(dirname(here()), "data", "maxent_spp_list.csv"))
library(here)
## Load data
spp_list <- read.csv(here(dirname(here()), "data", "maxent_spp_list.csv"))
spp_area_list <- read.csv(here(dirname(here()), "data", "spp_area_list.csv"))
spp_wght_fun <- function(df, scheme = 1, wv = c(1,2,4,6,8,2)){
nm <- paste0("scheme_",scheme)
# using {{}} := allows you to reference a column name as a string
#https://stackoverflow.com/questions/73285003/how-do-i-pass-a-column-name-to-a-function-involving-mutate
if(scheme == 1 | scheme == 3){
df1 <- df %>%
mutate({{nm}} := case_when(redlistCategory == "Least Concern" ~ wv[1],
redlistCategory == "Near Threatened" ~ wv[2],
redlistCategory == "Vulnerable" ~ wv[3],
redlistCategory == "Endangered" ~ wv[4],
redlistCategory == "Critically Endangered" ~ wv[5],
redlistCategory == "Data Deficient" ~ wv[6]))
}
if(scheme == 2 | scheme == 4){
df1 <- df %>%
mutate({{nm}} := case_when(redlistCategory == "Least Concern" ~ wv[1],
redlistCategory == "Near Threatened" ~ wv[2],
redlistCategory == "Vulnerable" ~ wv[3],
redlistCategory == "Endangered" ~ wv[4],
redlistCategory == "Critically Endangered" ~ wv[5],
redlistCategory == "Data Deficient" ~ wv[6])) %>%
mutate({{nm}} := case_when(code == "8.1.1" | code == "8.1.2" ~ get(!!nm) + 1,
.default = get(!!nm)))
}
return(df1)
}
spp_area_wght_fun <- function(df, scheme = 1, wv = c(1,2,4,6,8,2)){
nm <- paste0("scheme_",scheme)
areas <- c("Ecosystem","Community","Ramsar","Upstream")
if(scheme == 1 | scheme == 3){
df1 <- df %>%
mutate({{nm}} := case_when(threatStatus == "Least Concern" &
!classGroup %in% areas ~ wv[1],
threatStatus == "Near Threatened" &
!classGroup %in% areas ~ wv[2],
threatStatus == "Vulnerable" &
!classGroup %in% areas ~ wv[3],
threatStatus == "Endangered" &
!classGroup %in% areas ~ wv[4],
threatStatus == "Critically Endangered" &
!classGroup %in% areas ~ wv[5],
threatStatus == "Data Deficient" &
!classGroup %in% areas ~ wv[6],
.default = weight)) #%>%
#mutate({{nm}} := case_when(classGroup %in% areas ~ get(!!weight)))
}
if(scheme == 2 |scheme == 4){
df1 <- df %>%
mutate({{nm}} := case_when(threatStatus == "Least Concern" &
!classGroup %in% areas ~ wv[1],
threatStatus == "Near Threatened" &
!classGroup %in% areas ~ wv[2],
threatStatus == "Vulnerable" &
!classGroup %in% areas ~ wv[3],
threatStatus == "Endangered" &
!classGroup %in% areas ~ wv[4],
threatStatus == "Critically Endangered" &
!classGroup %in% areas ~ wv[5],
threatStatus == "Data Deficient" &
!classGroup %in% areas ~ wv[6],
.default = weight)) %>%
#mutate({{nm}} := case_when(classGroup %in% areas ~ weight)) %>%
mutate({{nm}} := case_when(code == "8.1.1" | code == "8.1.2" ~ get(!!nm) + 1,
.default = get(!!nm)))
}
return(df1)
}
spp_list <- spp_wght_fun(spp_list)
spp_area_list <- spp_area_wght_fun(spp_area_list)
## 2. Same threat ratings: IAS = threat + 1
spp_list <- spp_wght_fun(spp_list, scheme = 2)
spp_area_list <- spp_area_wght_fun(spp_area_list, scheme = 2)
## 3. Different threat ratings (1,2,3,4,5,2): no IAS
spp_list <- spp_wght_fun(spp_list, scheme = 3, wv = c(1,2,3,4,5,2))
spp_area_list <- spp_area_wght_fun(spp_area_list, scheme = 3, wv = c(1,2,3,4,5,2))
## 4. Different threat ratings (1,2,3,4,5,2): IAS = threat + 1
spp_list <- spp_wght_fun(spp_list, scheme = 4, wv = c(1,2,3,4,5,2))
spp_area_list <- spp_area_wght_fun(spp_area_list, scheme = 4, wv = c(1,2,3,4,5,2))
## Write to disk
write.csv(spp_list, here("zonation", "maxent_spp_list_upd.csv"))
## Write to disk
write.csv(spp_list, here(dirname(here()), "data", "maxent_spp_list_upd.csv"))
write.csv(spp_area_list, here(dirname(here()), "data", "spp_area_list_upd.csv"))
install.packages("sf")
install.packages("terra")
install.packages("stars")
install.packages("raster")
pkgs <- c("tidyverse", "sf", "terra", "stars", "here")
lapply(pkgs, require, character.only = T)
source("R/01_new_functions.R")
species_path <- here(dirname(here()), "data", "zonation", "species_scenarios")
species_area_path <- here(dirname(here()), "data", "zonation", "species_area_scenarios")
species_scenarios <- c("species_equal", "species_weight", "species_scheme_1",
"species_scheme_2", "species_scheme_3", "species_scheme_4",
"species_equal_KBA", "species_weight_KBA", "species_scheme_1_KBA",
"species_scheme_2_KBA", "species_scheme_3_KBA", "species_scheme_4_KBA",
"species_random")
species_area_scenarios <- c("species_area_equal", "species_area_weight", "species_area_scheme_1",
"species_area_scheme_2",
"species_area_scheme_3", "species_area_scheme_4",
"species_area_equal_KBA", "species_area_weight_KBA", "species_area_scheme_1_KBA",
"species_area_scheme_2_KBA", "species_area_scheme_3_KBA", "species_area_scheme_4_KBA",
"species_area_random")
# species_fig_list <- list()
species_rank_stack <- rast()
for(sp in species_scenarios){
ind <- which(species_scenarios == sp)
r <- rast(here(species_path, sp, "output", "rankmap.tif"))
names(r) <- sp
species_rank_stack <- c(species_rank_stack, r)
# species_fig_list[[ind]] <- rank_plot(r)
# ggsave(plot = species_fig_list[[ind]],
#        filename = paste0(sp, "_rankmap.pdf"),
#        device = cairo_pdf,
#        dpi = 300,
#        path = here(dirname(here()), "figures")) #dirname() lets you go one folder up
}
# species_area_fig_list <- list()
species_area_rank_stack <- rast()
for(sp in species_area_scenarios){
ind <- which(species_area_scenarios == sp)
r <- rast(here(species_area_path, sp, "output", "rankmap.tif"))
names(r) <- sp
species_area_rank_stack <- c(species_area_rank_stack, r)
# species_area_fig_list[[ind]] <- rank_plot(r)
# ggsave(plot = species_area_fig_list[[ind]],
#        filename = paste0(sp, "_rankmap.pdf"),
#        device = cairo_pdf,
#        dpi = 300,
#        path = here(dirname(here()), "figures")) #dirname() lets you go one folder up
}
rm(list = ls())
zonation_path <- here(dirname(here()), "data", "zonation")
species_path <- here(dirname(here()), "data","species_lowres")
species_area_path <- here(dirname(here()), "data","species_area_lowres")
###############################################################################
## Species only scenarios
spp_list <- read.csv(here(dirname(here()), "data", "maxent_spp_list_upd.csv")) %>%
filter(acceptedName != "Endospermum myrmecophilum" &
acceptedName != "Ozimops petersi") #files are corrupted
# CAZMAX is equivalent to CAZ in Zonation V4
weight_df <- data.frame(equal = rep(1, nrow(spp_list)), spp_list[,11:15])
weight_df
nm <- names(weight_df)[4]
variant_path <- here(zonation_path, "species_scenarios", paste0("species_",nm))
feature_list <- data.frame(weight = weight_df[,4],
group = spp_list$classGroupNum,
filename = list.files(species_path, full.names = T))
write.table(feature_list,
file = here(variant_path,"features.txt"), row.names = F)
Settings <- paste("feature list file =", here(variant_path,"features.txt"))
fileConn <- file(here(variant_path, paste0("species_",nm,".z5")))
writeLines(Settings, fileConn)
close(fileConn)
###############################################################################
## Species area scenarios
spp_list <- read.csv(here(zonation_path, "spp_area_list_upd.csv")) %>%
filter(acceptedName != "Morelia spilota") #files are corrupted
###############################################################################
## Species area scenarios
spp_list <- read.csv(here(dirname(here()), "data", "spp_area_list_upd.csv")) %>%
filter(acceptedName != "Morelia spilota") #files are corrupted
weight_df <- data.frame(equal = rep(1, nrow(spp_list)), spp_list[,11:15])
nm <- names(weight_df)[4]
variant_path <- here(zonation_path, "species_area_scenarios", paste0("species_area_",nm))
variant_path
feature_list <- data.frame(weight = weight_df[,4],
group = spp_list$classGroupNum,
filename = list.files(species_area_path, full.names = T))
write.table(feature_list,
file = here(variant_path,"features.txt"), row.names = F)
Settings <- paste("feature list file =", here(variant_path,"features.txt"))
fileConn <- file(here(variant_path, paste0("species_area_",nm,".z5")))
writeLines(Settings, fileConn)
close(fileConn)
rm(list = ls())
z_colors_spectral <- list(values=c(0.0, 0.2, 0.5, 0.75, 0.9, 0.95, 0.98, 1.0),
labels=c("0.00-0.20", "0.20-0.50", "0.50-0.75",
"0.75-0.90", "0.90-0.95", "0.95-0.98",
"0.98-1.00"),
colors=c("#2b83ba", "#80bfab", "#c7e8ad", "#ffffbf",
"#fdc980", "#f07c4a", "#d7191c"))
species_path <- here(dirname(here()), "data", "zonation", "species_scenarios")
species_area_path <- here(dirname(here()), "data", "zonation", "species_area_scenarios")
species_scenarios <- c("species_equal", "species_weight", "species_scheme_1",
"species_scheme_2", "species_scheme_3", "species_scheme_4",
"species_equal_KBA", "species_weight_KBA", "species_scheme_1_KBA",
"species_scheme_2_KBA", "species_scheme_3_KBA", "species_scheme_4_KBA",
"species_random")
species_area_scenarios <- c("species_area_equal", "species_area_weight", "species_area_scheme_1",
"species_area_scheme_2",
"species_area_scheme_3", "species_area_scheme_4",
"species_area_equal_KBA", "species_area_weight_KBA", "species_area_scheme_1_KBA",
"species_area_scheme_2_KBA", "species_area_scheme_3_KBA", "species_area_scheme_4_KBA",
"species_area_random")
# species_fig_list <- list()
species_rank_stack <- rast()
for(sp in species_scenarios){
ind <- which(species_scenarios == sp)
r <- rast(here(species_path, sp, "output", "rankmap.tif"))
names(r) <- sp
species_rank_stack <- c(species_rank_stack, r)
# species_fig_list[[ind]] <- rank_plot(r)
# ggsave(plot = species_fig_list[[ind]],
#        filename = paste0(sp, "_rankmap.pdf"),
#        device = cairo_pdf,
#        dpi = 300,
#        path = here(dirname(here()), "figures")) #dirname() lets you go one folder up
}
# species_area_fig_list <- list()
species_area_rank_stack <- rast()
for(sp in species_area_scenarios){
ind <- which(species_area_scenarios == sp)
r <- rast(here(species_area_path, sp, "output", "rankmap.tif"))
names(r) <- sp
species_area_rank_stack <- c(species_area_rank_stack, r)
# species_area_fig_list[[ind]] <- rank_plot(r)
# ggsave(plot = species_area_fig_list[[ind]],
#        filename = paste0(sp, "_rankmap.pdf"),
#        device = cairo_pdf,
#        dpi = 300,
#        path = here(dirname(here()), "figures")) #dirname() lets you go one folder up
}
full_rank_stack <- c(species_rank_stack, species_area_rank_stack)
source("R/01_new_functions.R")
priority_cors <- ras_cor(full_rank_stack)
colnames(priority_cors) <- names(full_rank_stack)
rownames(priority_cors) <- names(full_rank_stack)
write.csv(priority_cors, file = here(dirname(here()), "data", "priority_cors.csv"))
all_names <- names(full_rank_stack)
#Top 2%
top_two <- calculate_jaccards(stack(full_rank_stack), x.min = 0.98, x.max = 1.0,
y.min = 0.98,y.max = 1.0,all_names)
library(raster)
#Top 2%
top_two <- calculate_jaccards(stack(full_rank_stack), x.min = 0.98, x.max = 1.0,
y.min = 0.98,y.max = 1.0,all_names)
#Top 5%
top_five <- calculate_jaccards(stack(full_rank_stack), x.min = 0.95, x.max = 1.0,
y.min = 0.95,y.max = 1.0,all_names)
#Top 10%
top_ten <- calculate_jaccards(stack(full_rank_stack), x.min = 0.9, x.max = 1.0,
y.min = 0.9,y.max = 1.0,all_names)
#Top 25%
top_twentyfive <- calculate_jaccards(stack(full_rank_stack), x.min = 0.75, x.max = 1.0,
y.min = 0.75,y.max = 1.0,all_names)
#Top 50%
top_fifty <- calculate_jaccards(stack(full_rank_stack), x.min = 0.5, x.max = 1.0,
y.min = 0.5,y.max = 1.0,all_names)
#Top 80%
top_eighty <- calculate_jaccards(stack(full_rank_stack), x.min = 0.2, x.max = 1.0,
y.min = 0.2,y.max = 1.0,all_names)
#Total
total <- calculate_jaccards(stack(full_rank_stack), x.min = 0.0, x.max = 1.0,
y.min = 0.0,y.max = 1.0,all_names)
write.csv(top_two, file = here(dirname(here()), "data", "jaccard", "jaccard_two.csv"), na = "-", row.names = T)
write.csv(top_five, file = here(dirname(here()),"data", "jaccard", "jaccard_five.csv"), na = "-", row.names = T)
write.csv(top_ten, file = here(dirname(here()),"data", "jaccard", "jaccard_ten.csv"), na = "-", row.names = T)
write.csv(top_twentyfive, here(dirname(here()),"data", "jaccard", "jaccard_twentyfive.csv"), na = "-", row.names = T)
write.csv(top_fifty, file = here(dirname(here()),"data", "jaccard", "jaccard_fifty.csv"), na = "-", row.names = T)
write.csv(top_eighty, file = here(dirname(here()),"data", "jaccard", "jaccard_eighty.csv"), na = "-", row.names = T)
write.csv(total, file = here(dirname(here()), "data","jaccard", "jaccard_total.csv"), na = "-", row.names = T)
