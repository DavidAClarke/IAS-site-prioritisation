geom_vline(xintercept = 13.5, colour = "black", linetype = 1) +
geom_vline(xintercept = 14.5, colour = "black", linetype = 1) +
geom_vline(xintercept = 19.5, colour = "black", linetype = 1) +
geom_vline(xintercept = 20.5, colour = "black", linetype = 1) +
geom_vline(xintercept = 21.5, colour = "black", linetype = 1) +
geom_vline(xintercept = 25.5, colour = "black", linetype = 1)
} else {g}
}
## Calculate Jaccards----
# Taken from zonator R package (https://github.com/cbig/zonator/tree/master)
jaccard <- function(x, y, x.min=0.0, x.max=1.0, y.min=0.0, y.max=1.0,
warn.uneven=FALSE, limit.tolerance=4,
disable.checks=FALSE) {
if (!disable.checks) {
# Check the input values
x.min.value <- round(raster::cellStats(x, stat="min"), limit.tolerance)
x.max.value <- round(raster::cellStats(x, stat="max"), limit.tolerance)
y.min.value <- round(raster::cellStats(y, stat="min"), limit.tolerance)
y.max.value <- round(raster::cellStats(y, stat="max"), limit.tolerance)
if (x.min < x.min.value) {
stop(paste0("Minimum threshold value for x ("), x.min, ") smaller than
the computed minimum value in x (", x.min.value, ")")
}
if (x.max > x.max.value) {
stop(paste0("Maximum threshold value for x ("), x.max, ") smaller than
the computed maximum value in x (", x.max.value, ")")
}
if (x.min >= x.max) {
stop(paste0("Minimum threshold value for x ("), x.min, ") smaller than
maximum threshold value for x (", x.max, ")")
}
if (y.min < y.min.value) {
stop(paste0("Minimum threshold value for y ("), y.min, ") smaller than
the computed minimum value in y (", y.min.value, ")")
}
if (y.max > y.max.value) {
stop(paste0("Maximum threshold value for y ("), y.max, ") smaller than
the computed maximum value in y (", y.max.value, ")")
}
if (y.min >= y.max) {
stop(paste0("Minimum threshold value for y ("), y.min, ") smaller than
maximum threshold value for y (", y.max, ")")
}
# Comparisons using just the defaults is probably not feasible
if (x.min == 0.0 & x.max == 1.0 & y.min == 0.0 & y.max == 1.0) {
warning("Using all the defaults for x and y ranges")
}
} else {
message("Input limit checks disabled")
}
# [fixme] - using cellStats(X, "sum") should be safe as we're dealing with
# binary 0/1 rasters. count() would be preferable, but apparently raster
# (>= 2.2 at least) doesn't support it anymore.
# Get the values according to the limits provided
x.bin <- (x >= x.min & x <=x.max)
y.bin <- (y >= y.min & y <=y.max)
if (warn.uneven) {
x.size <- raster::cellStats(x.bin, "sum")
y.size <- raster::cellStats(y.bin, "sum")
# Sort from smaller to larger
sizes <- sort(c(x.size, y.size))
if (sizes[2] / sizes[1] > 20) {
warning("The extents of raster values above the threshhold differ more",
"than 20-fold: Jaccard coefficient may not be informative.")
}
}
# Calculate the intersection of the two rasters, this is given by adding
# the binary rasters together -> 2 indicates intersection
combination <- x.bin + y.bin
intersection <- combination == 2
# Union is all the area covered by the both rasters
union <- combination >= 1
return(raster::cellStats(intersection, "sum") / raster::cellStats(union, "sum"))
}
## Susceptible site prep----
susc_site_prep <- function(species_name, ras_stack){
sp <- gsub(" ", ".", species_name)
bin <- rast(raster::raster(here(regional_model_path,  sp,
paste0(sp,"_EMcaByTSS_mergedAlgo_mergedRun_mergedData_TSSbin.gri"))))
bin2 <- bin
bin2[bin2 != 0] <- 1
# Re-class zeros as NA
bin[bin == 0] <- NA
bin_list <- list()
for(i in 1:nlyr(ras_stack)){
bin_list[[i]] <- resample(bin, ras_stack[[i]], method = "near")
names(bin_list[[i]]) <- names(ras_stack[[i]])
}
return(list(bin_list, bin2))
}
## Get site sensitivity values----
get_msk_vals <- function(rank_raster, mask_file) {
temp_r <- mask(rank_raster, mask_file)
temp_r_values <- na.omit(values(temp_r))
}
## Proportion difference (KBA vs no KBA) in number of top sensitive sites----
#vals = output from get_msk_vals, sens = site sensitivity value
prop_diff <- function(vals, sens) {
vals_bin <- vals
vals_bin <- ifelse(vals_bin >= sens, 1,0)
sum(vals_bin)/length(vals_bin)*100
}
## Get proportion differences----
multi_props <- function(vals, props){
diffs <- c()
for(i in props[1:length(props)]){
d <- prop_diff(vals, i)
diffs <- c(diffs,d)
}
names(diffs) <- c("1.00", "0.98", "0.95", "0.90", "0.75", "0.50", "0.25",
"0.00")
return(diffs)
}
## Apply additional weighting schemes----
spp_wght_fun <- function(df, scheme = 1, wv = c(1,2,4,6,8,2)){
nm <- paste0("scheme_",scheme)
# using {{}} := allows you to reference a column name as a string
#https://stackoverflow.com/questions/73285003/how-do-i-pass-a-column-name-to-a-function-involving-mutate
if(scheme == 1 | scheme == 3){
df1 <- df %>%
mutate({{nm}} := case_when(redlistCategory == "Least Concern" ~ wv[1],
redlistCategory == "Near Threatened" ~ wv[2],
redlistCategory == "Vulnerable" ~ wv[3],
redlistCategory == "Endangered" ~ wv[4],
redlistCategory == "Critically Endangered" ~ wv[5],
redlistCategory == "Data Deficient" ~ wv[6]))
}
if(scheme == 2 | scheme == 4){
df1 <- df %>%
mutate({{nm}} := case_when(redlistCategory == "Least Concern" ~ wv[1],
redlistCategory == "Near Threatened" ~ wv[2],
redlistCategory == "Vulnerable" ~ wv[3],
redlistCategory == "Endangered" ~ wv[4],
redlistCategory == "Critically Endangered" ~ wv[5],
redlistCategory == "Data Deficient" ~ wv[6])) %>%
mutate({{nm}} := case_when(code == "8.1.1" | code == "8.1.2" ~ get(!!nm) + 1,
.default = get(!!nm)))
}
return(df1)
}
spp_area_wght_fun <- function(df, scheme = 1, wv = c(1,2,4,6,8,2)){
nm <- paste0("scheme_",scheme)
areas <- c("Ecosystem","Community","Ramsar","Upstream")
if(scheme == 1 | scheme == 3){
df1 <- df %>%
mutate({{nm}} := case_when(threatStatus == "Least Concern" &
!classGroup %in% areas ~ wv[1],
threatStatus == "Least Concern" &
classGroup %in% areas ~ wv[1] + 10 ,
threatStatus == "Near Threatened" &
!classGroup %in% areas ~ wv[2],
threatStatus == "Near Threatened" &
classGroup %in% areas ~ wv[2] + 10 ,
threatStatus == "Vulnerable" &
!classGroup %in% areas ~ wv[3],
threatStatus == "Vulnerable" &
classGroup %in% areas ~ wv[3] + 10 ,
threatStatus == "Endangered" &
!classGroup %in% areas ~ wv[4],
threatStatus == "Endangered" &
classGroup %in% areas ~ wv[4] + 10 ,
threatStatus == "Critically Endangered" &
!classGroup %in% areas ~ wv[5],
threatStatus == "Critically Endangered" &
classGroup %in% areas ~ wv[5] + 10 ,
threatStatus == "Data Deficient" &
!classGroup %in% areas ~ wv[6],
threatStatus == "Data Deficient" &
classGroup %in% areas ~ wv[6] + 10 ,
.default = weight)) #%>%
#mutate({{nm}} := case_when(classGroup %in% areas ~ get(!!weight)))
}
if(scheme == 2 |scheme == 4){
df1 <- df %>%
mutate({{nm}} := case_when(threatStatus == "Least Concern" &
!classGroup %in% areas ~ wv[1],
threatStatus == "Least Concern" &
classGroup %in% areas ~ wv[1] + 10 ,
threatStatus == "Near Threatened" &
!classGroup %in% areas ~ wv[2],
threatStatus == "Near Threatened" &
classGroup %in% areas ~ wv[2] + 10 ,
threatStatus == "Vulnerable" &
!classGroup %in% areas ~ wv[3],
threatStatus == "Vulnerable" &
classGroup %in% areas ~ wv[3] + 10 ,
threatStatus == "Endangered" &
!classGroup %in% areas ~ wv[4],
threatStatus == "Endangered" &
classGroup %in% areas ~ wv[4] + 10 ,
threatStatus == "Critically Endangered" &
!classGroup %in% areas ~ wv[5],
threatStatus == "Critically Endangered" &
classGroup %in% areas ~ wv[5] + 10 ,
threatStatus == "Data Deficient" &
!classGroup %in% areas ~ wv[6],
threatStatus == "Data Deficient" &
classGroup %in% areas ~ wv[6] + 10 ,
.default = weight)) %>%
#mutate({{nm}} := case_when(classGroup %in% areas ~ weight)) %>%
mutate({{nm}} := case_when(code == "8.1.1" | code == "8.1.2" ~ get(!!nm) + 1,
.default = get(!!nm)))
}
return(df1)
}
## Taking a little off values of 1----
squeeze <- function(pvector){
for(i in 1:length(pvector)) {
if(!is.na(pvector[i]) == T & pvector[i] == 1){
pvector[i] <- pvector[i] - 0.000001
}
}
return(pvector)
}
## Create binary layers based on given site sensitivity----
spat_priority_dist <- function(df, n_col){
for(i in 1:n_col){
df[,i] <- ifelse(df[,i] >= 0.98, 1,0)}
return(df)
}
## Clarke-Evans test with cdf correction----
clus_fun <- function(df, win_poly, lay_ind){
df <- df %>%
dplyr::select(all_of(c(lay_ind,27,28))) %>%
filter(df[[lay_ind]] == 1)
p <- ppp(df[,2], df[,3],
window = as.owin(st_as_sf(win_poly)))
ce <- clarkevans.test(p, alternative = "clustered", correction = "cdf")
return(list(ce,p))
}
## Create predicted IAS distribution plots----
IAS_plot <- function(species){
species <- gsub(" ", ".", species)
r <- rast(raster(here(regional_model_path,
species,
paste0(species,"_EMcaByTSS_mergedAlgo_mergedRun_mergedData.gri"))))
r <- r/1000 #back to a 0-1 scale
r_sf <- st_as_stars(r) %>%
st_as_sf()
r_plot <- ggplot()+
geom_sf(data = r_sf, aes(fill=layer),
color=NA,
show.legend = T) +
scale_fill_gradientn(colours = brewer.pal('YlGnBu', n=9),
name = "Habitat suitability") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
return(r_plot)
}
## Priority map----
priority_map <- function(sens, susc){
susc[susc == 0] <- NA
r1 <- as.polygons(susc) %>%
st_as_sf()
r2 <- resample(sens, susc)
r2 <- mask(r2, r1)
r2 <- st_as_stars(r2) %>%
st_as_sf()
r3 <- st_as_stars(sens) %>%
st_as_sf()
ggplot()+
geom_sf(data = r3, aes(fill = r3[[1]]),
color = NA,
show.legend = F,
alpha = 0.2) +
geom_sf(data = r2, aes(fill = r2[[1]]),
color = NA,
show.legend = T) +
scale_fill_gradientn(colours = z_colors_spectral$colors,
values = z_colors_spectral$values,
name = "Site\nsensitivity",
breaks = c(0.0, 0.2, 0.4, 0.6, 0.8,1)) +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
}
################################## Zonation results ############################
z_colors_spectral <- list(values=c(0.0, 0.2, 0.5, 0.75, 0.9, 0.95, 0.98, 1.0),
labels=c("0.00-0.20", "0.20-0.50", "0.50-0.75",
"0.75-0.90", "0.90-0.95", "0.95-0.98",
"0.98-1.00"),
colors=c("#2b83ba", "#80bfab", "#c7e8ad", "#ffffbf",
"#fdc980", "#f07c4a", "#d7191c"))
species_path <- here(dirname(here()), "data", "zonation", "species_scenarios")
species_area_path <- here(dirname(here()), "data", "zonation", "species_area_scenarios")
species_scenarios <- c("species_equal", "species_weight", "species_scheme_1",
"species_scheme_2", "species_scheme_3", "species_scheme_4",
"species_equal_KBA", "species_weight_KBA", "species_scheme_1_KBA",
"species_scheme_2_KBA", "species_scheme_3_KBA", "species_scheme_4_KBA",
"species_random")
species_area_scenarios <- c("species_area_equal", "species_area_weight",
"species_area_scheme_1", "species_area_scheme_2",
"species_area_scheme_3", "species_area_scheme_4",
"species_area_equal_KBA", "species_area_weight_KBA",
"species_area_scheme_1_KBA", "species_area_scheme_2_KBA",
"species_area_scheme_3_KBA", "species_area_scheme_4_KBA",
"species_area_random")
full_rank_stack <- rast(here(dirname(here()), "data", "zonation", "full_rank_stack.tif"))
## SSIM maps
r <- rast(here(dirname(here()), "data", "ssim", "species_area_weight-species_area_weight_KBA.tif"))
r1 <- st_as_stars(r[[1]]) %>%
st_as_sf()
r1v <- st_drop_geometry(r1)
gsim <- ggplot() +
geom_sf(data = r1,
aes(fill=r1v[,1]),
color=NA,
show.legend = T) +
colorspace::scale_fill_continuous_sequential("ag_sunset",
name = "SIM") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
r1 <- st_as_stars(r[[2]]) %>%
st_as_sf()
r1v <- st_drop_geometry(r1)
gsim <- ggplot() +
geom_sf(data = r1,
aes(fill=r1v[,1]),
color=NA,
show.legend = T) +
colorspace::scale_fill_continuous_sequential("ag_sunset",
name = "SIM") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
r1 <- st_as_stars(r[[3]]) %>%
st_as_sf()
r1v <- st_drop_geometry(r1)
gsiv <- ggplot() +
geom_sf(data = r1,
aes(fill=r1v[,1]),
color=NA,
show.legend = T) +
colorspace::scale_fill_continuous_sequential("batlow",
name = "SIV") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
r1 <- st_as_stars(r[[4]]) %>%
st_as_sf()
r1v <- st_drop_geometry(r1)
gsip <- ggplot() +
geom_sf(data = r1,
aes(fill=r1v[,1]),
color=NA,
show.legend = T) +
colorspace::scale_fill_continuous_diverging("Blue-Red",
name = "SIP") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
r1 <- st_as_stars(full_rank_stack[[15]] - full_rank_stack[[21]]) %>%
st_as_sf()
r1v <- st_drop_geometry(r1)
gdif <- ggplot() +
geom_sf(data = r1,
aes(fill=r1v[,1]),
color=NA,
show.legend = T) +
colorspace::scale_fill_continuous_diverging("Purple-Green",
name = "DIFF") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
g1 <- rank_plot(full_rank_stack[[15]])
g2 <- rank_plot(full_rank_stack[[21]])
gc()
ggpubr::ggarrange(g1, gdif, gsim,
g2, gsiv, gsip,
nrow = 2, ncol = 3, common.legend = F)
gsip
gsim
r1v[,1]
ggplot() +
geom_sf(data = r1,
aes(fill=r1v[,1]),
color=NA,
show.legend = T) +
colorspace::scale_fill_continuous_sequential("batlow",
name = "SIV")
r1 <- st_as_stars(r[[2]]) %>%
st_as_sf()
r1v <- st_drop_geometry(r1)
summary(r1v[,1])
gsim <- ggplot() +
geom_sf(data = r1,
aes(fill=r1v[,1]),
color=NA,
show.legend = T) +
colorspace::scale_fill_continuous_sequential("ag_sunset",
name = "SIM") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
gsim
gc()
r2 <- st_as_stars(r[[3]]) %>%
st_as_sf()
r2v <- st_drop_geometry(r2)
gsiv <- ggplot() +
geom_sf(data = r2,
aes(fill=r2v[,1]),
color=NA,
show.legend = T) +
colorspace::scale_fill_continuous_sequential("batlow",
name = "SIV") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
gsiv
r3 <- st_as_stars(r[[4]]) %>%
st_as_sf()
r3v <- st_drop_geometry(r3)
gsip <- ggplot() +
geom_sf(data = r3,
aes(fill=r3v[,1]),
color=NA,
show.legend = T) +
colorspace::scale_fill_continuous_diverging("Blue-Red",
name = "SIP") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
gsip
gc()
r4 <- st_as_stars(full_rank_stack[[15]] - full_rank_stack[[21]]) %>%
st_as_sf()
r4v <- st_drop_geometry(r4)
gdif <- ggplot() +
geom_sf(data = r4,
aes(fill=r4v[,1]),
color=NA,
show.legend = T) +
colorspace::scale_fill_continuous_diverging("Purple-Green",
name = "DIFF") +
theme_bw() +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
gdif
g1 <- rank_plot(full_rank_stack[[15]])
g1
g2 <- rank_plot(full_rank_stack[[21]])
ggpubr::ggarrange(g1, gdif, gsim,
g2, gsiv, gsip,
nrow = 2, ncol = 3, common.legend = F)
??ggarrange
gc()
ggpubr::ggarrange(g1, gdif, gsim,
g2, gsiv, gsip,
nrow = 2, ncol = 3,
common.legend = F,
labels = "AUTO")
citation("SSIMmap")
rm(list = ls())
gc()
