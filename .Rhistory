"C:/Program Files/Zonation5/z5.exe"
"C:\Program Files\Zonation5/z5.exe"
library(here)
z5_16bit -wg -h -b --mode=CAZMAX C:\Users\david\Documents\postdoc\projects\site_prioritisation\IAS-site-prioritisation\zonation\species_area_scenarios\species_area_equal_KBA\species_area_equal_KBA.z5 C:\Users\david\Documents\postdoc\projects\site_prioritisation\IAS-site-prioritisation\zonation\species_area_scenarios\species_area_equal_KBA\output
z5_path <- "C:/Program Files/Zonation5/z5.exe"
settings_file <- "C:/Users/david/Documents/postdoc/projects/site_prioritisation/IAS-site-prioritisation/zonation/species_area_scenarios/species_area_equal_KBA/species_area_equal_KBA.z5"
ouput_dir <- "C:/Users/david/Documents/postdoc/projects/site_prioritisation/IAS-site-prioritisation/zonation/species_area_scenarios/species_area_equal_KBA/output"
pkgs <- c("tidyverse", "here")
lapply(pkgs, require, character.only = T)
zonation_path <- here(dirname(here()), "data", "zonation")
## Create bat files
z5_path <- "C:/Program Files/Zonation5/z5.exe"
settings_file <- here(zonation_path, "species_area_scenarios",
"species_area_equal_KBA", "species_area_equal_KBA.z5")
output_dir <- here(zonation_path, "species_area_scenarios",
"species_area_equal_KBA", "output")
run <- paste(z5_path, "-wg", "-h", "-b", "--mode==CAZMAX", settings_file, ouput_dir)
fileConn <- file(here(zonation_path, "species_area_scenarios", "species_area_scenarios.bat"))
writeLines(run, fileConn)
close(fileConn)
run2 <- paste(z5_path, "-wg", "-h", "-b", "--mode==CAZMAX", settings_file, ouput_dir)
fileConn <- file(here(zonation_path, "species_area_scenarios", "species_area_scenarios.bat"))
writeLines(c(run1,run2), fileConn)
run1 <- paste(z5_path, "-wg", "-h", "-b", "--mode==CAZMAX", settings_file, ouput_dir)
fileConn <- file(here(zonation_path, "species_area_scenarios", "species_area_scenarios.bat"))
writeLines(c(run1,run2), fileConn)
close(fileConn)
cat(run2)
?shell.exec
?shell
library(SSIMmap)
library(terra)
?global
pkgs <- c("tidyverse", "sf", "terra", "stars", "here")
lapply(pkgs, require, character.only = T)
z_colors_spectral <- list(values=c(0.0, 0.2, 0.5, 0.75, 0.9, 0.95, 0.98, 1.0),
labels=c("0.00-0.20", "0.20-0.50", "0.50-0.75",
"0.75-0.90", "0.90-0.95", "0.95-0.98",
"0.98-1.00"),
colors=c("#2b83ba", "#80bfab", "#c7e8ad", "#ffffbf",
"#fdc980", "#f07c4a", "#d7191c"))
species_path <- here(dirname(here()), "data", "zonation", "species_scenarios")
species_area_path <- here(dirname(here()), "data", "zonation", "species_area_scenarios")
species_scenarios <- c("species_equal", "species_weight", "species_scheme_1",
"species_scheme_2", "species_scheme_3", "species_scheme_4",
"species_equal_KBA", "species_weight_KBA", "species_scheme_1_KBA",
"species_scheme_2_KBA", "species_scheme_3_KBA", "species_scheme_4_KBA",
"species_random")
species_area_scenarios <- c("species_area_equal", "species_area_weight", "species_area_scheme_1",
"species_area_scheme_2",
"species_area_scheme_3", "species_area_scheme_4",
"species_area_equal_KBA", "species_area_weight_KBA", "species_area_scheme_1_KBA",
"species_area_scheme_2_KBA", "species_area_scheme_3_KBA", "species_area_scheme_4_KBA",
"species_area_random")
# species_fig_list <- list()
species_rank_stack <- rast()
for(sp in species_scenarios){
ind <- which(species_scenarios == sp)
r <- rast(here(species_path, sp, "output", "rankmap.tif"))
names(r) <- sp
species_rank_stack <- c(species_rank_stack, r)
# species_fig_list[[ind]] <- rank_plot(r)
# ggsave(plot = species_fig_list[[ind]],
#        filename = paste0(sp, "_rankmap.pdf"),
#        device = cairo_pdf,
#        dpi = 300,
#        path = here(dirname(here()), "figures")) #dirname() lets you go one folder up
}
#rm(species_fig_list)
# species_area_fig_list <- list()
species_area_rank_stack <- rast()
for(sp in species_area_scenarios){
ind <- which(species_area_scenarios == sp)
r <- rast(here(species_area_path, sp, "output", "rankmap.tif"))
names(r) <- sp
species_area_rank_stack <- c(species_area_rank_stack, r)
# species_area_fig_list[[ind]] <- rank_plot(r)
# ggsave(plot = species_area_fig_list[[ind]],
#        filename = paste0(sp, "_rankmap.pdf"),
#        device = cairo_pdf,
#        dpi = 300,
#        path = here(dirname(here()), "figures")) #dirname() lets you go one folder up
}
full_rank_stack <- c(species_rank_stack, species_area_rank_stack)
## Structural similarity index----
ssim <- function(ras_stack){
ssim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
siv_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sip_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
ssim_list <- list()
for(i in 1:nlyr(ras_stack)){
for(j in 1:nlyr(ras_stack)){
if(i != j){
my_ssim <- ssim_raster(ras_stack[[i]], ras_stack[[j]], global = F)
ssim_list[[i]] <- my_ssim
ssim_mat[i,j] <- global(my_ssim[[1]], "mean", na.rm = T)
sim_mat[i,j] <- global(my_ssim[[2]], "mean", na.rm = T)
siv_mat[i,j] <- global(my_ssim[[3]], "mean", na.rm = T)
sip_mat[i,j] <- global(my_ssim[[4]], "mean", na.rm = T)
}
}
}
my_list <- list(ssim_list, ssim_mat, sim_mat, siv_mat, sip_mat)
return(my_list)
}
test <- ssim(full_rank_stack)
ssim_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
my_ssim <- ssim_raster(full_rank_stack[[1]], full_rank_stack[[2]], global = F)
my_ssim[[1]]
global(my_ssim[[1]], "mean", na.rm = T)
ssim_mat[2,1] <- global(my_ssim[[1]], "mean", na.rm = T)
View(ssim_mat)
g global(my_ssim[[1]], "mean", na.rm = T)
g  <- global(my_ssim[[1]], "mean", na.rm = T)
g
as.numeric(g)
## Structural similarity index----
ssim <- function(ras_stack){
ssim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
siv_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sip_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
ssim_list <- list()
for(i in 1:nlyr(ras_stack)){
for(j in 1:nlyr(ras_stack)){
if(i != j){
my_ssim <- ssim_raster(ras_stack[[i]], ras_stack[[j]], global = F)
ssim_list[[i]] <- my_ssim
ssim_mat[j,i] <- as.numeric(global(my_ssim[[1]], "mean", na.rm = T))
sim_mat[j,i] <- as.numeric(global(my_ssim[[2]], "mean", na.rm = T))
siv_mat[j,i] <- as.numeric(global(my_ssim[[3]], "mean", na.rm = T))
sip_mat[j,i] <- as.numeric(global(my_ssim[[4]], "mean", na.rm = T))
}
}
}
my_list <- list(ssim_list, ssim_mat, sim_mat, siv_mat, sip_mat)
return(my_list)
}
test <- ssim(full_rank_stack)
View(ssim_mat)
View(test)
test
test[[2]]
test[[1]][[1]]
varnames(test[[1]][[1]])
paste(names(full_rank_stack[[1]]), names(full_rank_stack[[2]]), collapse = "-")
paste(names(full_rank_stack[[1]]), names(full_rank_stack[[2]]), collapse = "")
?paste
paste(names(full_rank_stack[[1]]), names(full_rank_stack[[2]]))
paste(names(full_rank_stack[[1]]), names(full_rank_stack[[2]]), collapse = "+")
paste(names(full_rank_stack[[1]]),"-", names(full_rank_stack[[2]]))
diag(test[[1]])
diag(test[[2]])
diag(test[[2]]) <- 1
diag(test[[2]])
diag(test[[3]]) <- diag(test[[4]]) <- 1
diag(test[[3]])
diag(test[[4]])
gc()
combn(26,2)
length(combn(26,2))
cc <- combn(26,2)
cc
cc[,1]
cc[,2]
cc[1,2]
cc[2,2]
cc[1,1]
cc[2,1]
my_combs <- combn(nlyr(full_rank_stack), 2)
length(my_combs)
ncol(my_combs)
my_combs[,1]
full_rank_stack[[my_combs[1,1]]]
varnames(test[[1]][[1]])
gc()
my_ssim
rm(my_ssim, test, ssim_mat)
rm(g)
gc()
## Structural similarity index----
ssim <- function(ras_stack){
ssim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
siv_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sip_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
ssim_list <- list()
my_combs <- combn(nlyr(ras_stack), 2)
for(k in 1:ncol(my_combs)){
my_ssim <- ssim_raster(ras_stack[[my_combs[1,k]]], ras_stack[[my_combs[2,k]]], global = F)
ssim_list[[k]] <- my_ssim
varnames(ssim_list[[k]]) <- paste(names(ras_stack[[my_combs[1,k]]]),"-",
names(ras_stack[[my_combs[2,k]]]))
for(i in 1:nlyr(ras_stack)){
for(j in 1:nlyr(ras_stack)){
if(i != j){
ssim_mat[j,i] <- as.numeric(global(my_ssim[[1]], "mean", na.rm = T))
sim_mat[j,i] <- as.numeric(global(my_ssim[[2]], "mean", na.rm = T))
siv_mat[j,i] <- as.numeric(global(my_ssim[[3]], "mean", na.rm = T))
sip_mat[j,i] <- as.numeric(global(my_ssim[[4]], "mean", na.rm = T))
}
}
}
}
diag(ssim_mat) <- diag(sim_mat) <- diag(siv_mat) <- diag(sip_mat) <- 1
my_list <- list(ssim_list = ssim_list, ssim_mat = ssim_mat,
sim_mat = sim_mat, siv_mat = siv_mat, sip_mat = sip_mat)
return(my_list)
}
gc()
test <- ssim(full_rank_stack)
gc()
ssim_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
sim_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
siv_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
sip_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
my_combs <- combn(nlyr(full_rank_stack), 2)
ssim_list <- list()
for(k in 1:2){
my_ssim <- ssim_raster(full_rank_stack[[my_combs[1,k]]], full_rank_stack[[my_combs[2,k]]], global = F)
ssim_list[[k]] <- my_ssim
varnames(ssim_list[[k]]) <- paste(names(full_rank_stack[[my_combs[1,k]]]),"-",
names(full_rank_stack[[my_combs[2,k]]]))
for(i in 1:3){
for(j in 1:3){
if(i != j){
ssim_mat[j,i] <- as.numeric(global(my_ssim[[1]], "mean", na.rm = T))
sim_mat[j,i] <- as.numeric(global(my_ssim[[2]], "mean", na.rm = T))
siv_mat[j,i] <- as.numeric(global(my_ssim[[3]], "mean", na.rm = T))
sip_mat[j,i] <- as.numeric(global(my_ssim[[4]], "mean", na.rm = T))
}
}
}
}
View(ssim_list)
ssim_list[[1]]
ssim_list[[2]]
head(ssim_mat)
ssim_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
sim_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
siv_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
sip_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
ssim_list <- list()
for(k in 1:2){
my_ssim <- ssim_raster(full_rank_stack[[my_combs[1,k]]], full_rank_stack[[my_combs[2,k]]], global = F)
ssim_list[[k]] <- my_ssim
varnames(ssim_list[[k]]) <- paste(names(full_rank_stack[[my_combs[1,k]]]),"-",
names(full_rank_stack[[my_combs[2,k]]]))
for(i in 1:3){
for(j in 1:3){
if(i != j){
ssim_mat[j,i] <- as.numeric(global(ssim_list[[k]][[1]], "mean", na.rm = T))
sim_mat[j,i] <- as.numeric(global(ssim_list[[k]][[2]], "mean", na.rm = T))
siv_mat[j,i] <- as.numeric(global(ssim_list[[k]][[3]], "mean", na.rm = T))
sip_mat[j,i] <- as.numeric(global(ssim_list[[k]][[4]], "mean", na.rm = T))
}
}
}
}
head(ssim_mat)
as.numeric(global(ssim_list[[1]][[1]], "mean", na.rm = T))
as.numeric(global(ssim_list[[2]][[1]], "mean", na.rm = T))
my_combs[1,1]
my_combs[2,1]
my_combs[2,2]
ssim_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
sim_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
siv_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
sip_mat <- matrix(nrow = nlyr(full_rank_stack), ncol = nlyr(full_rank_stack))
ssim_list <- list()
for(k in 1:3){
my_ssim <- ssim_raster(full_rank_stack[[my_combs[1,k]]], full_rank_stack[[my_combs[2,k]]], global = F)
ssim_list[[k]] <- my_ssim
varnames(ssim_list[[k]]) <- paste(names(full_rank_stack[[my_combs[1,k]]]),"-",
names(full_rank_stack[[my_combs[2,k]]]))
ssim_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(ssim_list[[k]][[1]], "mean", na.rm = T))
sim_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(ssim_list[[k]][[2]], "mean", na.rm = T))
siv_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(ssim_list[[k]][[3]], "mean", na.rm = T))
sip_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(ssim_list[[k]][[4]], "mean", na.rm = T))
}
head(ssim_mat)
my_combs[,5]
my_combs[,70]
my_combs[,6]
my_combs[,9]
my_combs[,27]
my_combs[,26]
my_combs[,25]
my_path <- here(dirname(here()), "data", "ssim")
file.exists(my_path)
here(my_path, paste0(varnames(my_ssim), ".tif")
here(my_path, paste0(varnames(my_ssim), ".tif"))
varnames(my_ssim) <- paste0(names(full_rank_stack[[my_combs[1,k]]]),"_",
names(full_rank_stack[[my_combs[2,k]]]))
here(my_path, paste0(varnames(my_ssim), ".tif"))
## Structural similarity index----
ssim <- function(ras_stack){
ssim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
siv_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sip_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
my_combs <- combn(nlyr(ras_stack), 2)
for(k in 1:ncol(my_combs)){
my_ssim <- ssim_raster(ras_stack[[my_combs[1,k]]], ras_stack[[my_combs[2,k]]], global = F)
varnames(my_ssim) <- paste0(names(ras_stack[[my_combs[1,k]]]),"-",
names(ras_stack[[my_combs[2,k]]]))
my_path <- here(dirname(here()), "data", "ssim")
if(file.exists(my_path)){
writeRaster(my_ssim, filename = here(my_path, paste0(varnames(my_ssim), ".tif")))
} else {
dir.create(my_path)
writeRaster(my_ssim, filename = here(my_path, paste0(varnames(my_ssim), ".tif")))
}
ssim_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[1]], "mean", na.rm = T))
sim_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[2]], "mean", na.rm = T))
siv_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[3]], "mean", na.rm = T))
sip_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[4]], "mean", na.rm = T))
}
diag(ssim_mat) <- diag(sim_mat) <- diag(siv_mat) <- diag(sip_mat) <- 1
my_list <- list(ssim_mat = ssim_mat,
sim_mat = sim_mat,
siv_mat = siv_mat,
sip_mat = sip_mat)
return(my_list)
}
full_rank_stack[1:3]
full_rank_stack[[1:3]]
ssim(full_rank_stack[[1:3]])
rownames(ssim_mat) <- rownames(sim_mat) <- rownames(siv_mat) <- rownames(sip_mat) <- names(ras_stack)
rownames(ssim_mat) <- rownames(sim_mat) <- rownames(siv_mat) <- rownames(sip_mat) <- names(full_rank_stack)
head(ssim_mat)
## Structural similarity index----
ssim <- function(ras_stack){
ssim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
siv_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sip_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
my_combs <- combn(nlyr(ras_stack), 2)
for(k in 1:ncol(my_combs)){
my_ssim <- ssim_raster(ras_stack[[my_combs[1,k]]], ras_stack[[my_combs[2,k]]], global = F)
varnames(my_ssim) <- paste0(names(ras_stack[[my_combs[1,k]]]),"-",
names(ras_stack[[my_combs[2,k]]]))
my_path <- here(dirname(here()), "data", "ssim")
if(file.exists(my_path)){
writeRaster(my_ssim, filename = here(my_path, paste0(varnames(my_ssim), ".tif")))
} else {
dir.create(my_path)
writeRaster(my_ssim, filename = here(my_path, paste0(varnames(my_ssim), ".tif")))
}
ssim_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[1]], "mean", na.rm = T))
sim_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[2]], "mean", na.rm = T))
siv_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[3]], "mean", na.rm = T))
sip_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[4]], "mean", na.rm = T))
}
diag(ssim_mat) <- diag(sim_mat) <- diag(siv_mat) <- diag(sip_mat) <- 1
rownames(ssim_mat) <- rownames(sim_mat) <- rownames(siv_mat) <- rownames(sip_mat) <- names(ras_stack)
colnames(ssim_mat) <- colnames(sim_mat) <- colnames(siv_mat) <- colnames(sip_mat) <- names(ras_stack)
my_list <- list(ssim_mat = ssim_mat,
sim_mat = sim_mat,
siv_mat = siv_mat,
sip_mat = sip_mat)
return(my_list)
}
gc()
edge.cor.ref <- function(ras,w){
iter.edge.cor.ref <- function(ind, ras, cel){
#reflect along vertical/horizontal edges
i <- cel*2-1
col. <- colFromCell(ras,ind)
row. <- rowFromCell(ras,ind)
cols <- c(col.-i, col.,   col.+i, col.)
rows <- c(row.,   row.-i, row.,   row.+i)
celly <- cellFromRowCol(ras,rows,cols)
subr <- ras[celly]
est <- mean(subr,na.rm=TRUE)
if (!is.nan(est)){
return(est)
} else {
#Reflect along diagonal if it is only corner connected.
cols <- c(col.-i, col.-i, col.+i, col.+i)
rows <- c(row.-i, row.+i, row.+i, row.-i)
celly <- cellFromRowCol(ras,rows,cols)
subr <- ras[celly]
est <- mean(subr,na.rm=TRUE)
if (!is.nan(est)){
return(est)
} else {return(NA)}
}
}
#--------------
#Assume NA values (edge padding or donut holes) exist for edge correction.
for (cel in 1:w){
temp <- boundaries(ras,type='outer')
loc <- Which(temp==1,cells=T)
for (ind in loc){
ras[ind] <- iter.edge.cor.ref(ind,ras,cel)
}
}
return(ras)
}
library(raster)
edge.cor.ref(my_ssim, 3)
?boundaries
is.raster(my_ssim)
is.raster(raster(my_ssim))
class(my_ssim)
class(my_ssim)[1]
class(my_ssim)[2]
class(raster(my_ssim))
edge.cor.ref <- function(ras,w){
ras <- raster(ras)
iter.edge.cor.ref <- function(ind, ras, cel){
#reflect along vertical/horizontal edges
i <- cel*2-1
col. <- colFromCell(ras,ind)
row. <- rowFromCell(ras,ind)
cols <- c(col.-i, col.,   col.+i, col.)
rows <- c(row.,   row.-i, row.,   row.+i)
celly <- cellFromRowCol(ras,rows,cols)
subr <- ras[celly]
est <- mean(subr,na.rm=TRUE)
if (!is.nan(est)){
return(est)
} else {
#Reflect along diagonal if it is only corner connected.
cols <- c(col.-i, col.-i, col.+i, col.+i)
rows <- c(row.-i, row.+i, row.+i, row.-i)
celly <- cellFromRowCol(ras,rows,cols)
subr <- ras[celly]
est <- mean(subr,na.rm=TRUE)
if (!is.nan(est)){
return(est)
} else {return(NA)}
}
}
#--------------
#Assume NA values (edge padding or donut holes) exist for edge correction.
for (cel in 1:w){
temp <- boundaries(ras,type='outer')
loc <- Which(temp==1,cells=T)
for (ind in loc){
ras[ind] <- iter.edge.cor.ref(ind,ras,cel)
}
}
return(ras)
}
edge.cor.ref(my_ssim, 3)
my_ssim
## Structural similarity index----
ssim <- function(ras_stack){
ssim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sim_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
siv_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
sip_mat <- matrix(nrow = nlyr(ras_stack), ncol = nlyr(ras_stack))
my_combs <- combn(nlyr(ras_stack), 2)
for(k in 1:ncol(my_combs)){
my_ssim <- ssim_raster(ras_stack[[my_combs[1,k]]], ras_stack[[my_combs[2,k]]], global = F)
varnames(my_ssim) <- paste0(names(ras_stack[[my_combs[1,k]]]),"-",
names(ras_stack[[my_combs[2,k]]]))
my_path <- here(dirname(here()), "data", "ssim")
if(file.exists(my_path)){
writeRaster(my_ssim, filename = here(my_path, paste0(varnames(my_ssim), ".tif")))
} else {
dir.create(my_path)
writeRaster(my_ssim, filename = here(my_path, paste0(varnames(my_ssim), ".tif")))
}
ssim_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[1]], "mean", na.rm = T))
sim_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[2]], "mean", na.rm = T))
siv_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[3]], "mean", na.rm = T))
sip_mat[my_combs[2,k],my_combs[1,k]] <- as.numeric(global(my_ssim[[4]], "mean", na.rm = T))
}
diag(ssim_mat) <- diag(sim_mat) <- diag(siv_mat) <- diag(sip_mat) <- 1
rownames(ssim_mat) <- rownames(sim_mat) <- rownames(siv_mat) <- rownames(sip_mat) <- names(ras_stack)
colnames(ssim_mat) <- colnames(sim_mat) <- colnames(siv_mat) <- colnames(sip_mat) <- names(ras_stack)
my_list <- list(ssim_mat = ssim_mat,
sim_mat = sim_mat,
siv_mat = siv_mat,
sip_mat = sip_mat)
return(my_list)
}
## Structural similarity among sensitive sites
ssims <- ssim(full_rank_stack)
head(ssims)
full_rank_stack
plot(full_rank_stack[[2]])
plot(full_rank_stack[[7]])
plot(full_rank_stack[[7]], col = z_colors_spectral)
plot(full_rank_stack[[7]], col = z_colors_spectral$colors)
plot(full_rank_stack[[7]], col = z_colors_spectral$colors, breaks = z_colors_spectral$values)
plot(full_rank_stack[[2]], col = z_colors_spectral$colors, breaks = z_colors_spectral$values)
ssim_raster(full_rank_stack[[2]], full_rank_stack[[7]], global = T)
ssims$ssim_mat
ssim_raster(full_rank_stack[[1]], full_rank_stack[[2]], global = T)
head(ssims$ssim_mat)
ssim_raster(full_rank_stack[[1]], full_rank_stack[[3]], global = T)
head(ssims$ssim_mat)
ssim_raster(full_rank_stack[[2]], full_rank_stack[[3]], global = T)
head(ssims$ssim_mat)
ssims$ssim_mat
ssim_raster(full_rank_stack[[2]], full_rank_stack[[8]], global = T)
plot(full_rank_stack[[8]], col = z_colors_spectral$colors, breaks = z_colors_spectral$values)
plot(full_rank_stack[[2]], col = z_colors_spectral$colors, breaks = z_colors_spectral$values)
names(ssims)
names(ssims[[1]])
names(ssims)[1]
paste0(names(ssims)[1], ".csv")
here(dirname(here()), "data", "ssim", paste0(names(ssims)[1], ".csv"))
length(ssims)
for(i in 1:length(ssims)){
write.csv(ssims[[i]], file = here(dirname(here()), "data", "ssim", paste0(names(ssims)[i], ".csv")))
}
